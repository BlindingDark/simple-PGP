cmdhistory=["(create rdr)" "(exists? rdr)" "(ns gpg.core\\r\\n   (\:use [clojure.java.io]\\r\\n         [me.raynes.fs]))" "(ns gpg.core\\r\\n   (\:use [me.raynes.fs]))" "(ns gpg.core\\r\\n   (\:require [me.raynes.fs \:as fs]))" "(create rdr)" "(me.raynes.fs/create rdr)" "(create \\"C\:\\\\Users\\\\BlindingDark\\\\Desktop\\\\1.txt\\")" "(create \\"1.txt\\")" "(def rdr (reader \\"1.txt\\" \:encoding \\"utf-8\\"))\\r\\n(create rdr)" "(create (file \\"C\:\\\\Users\\\\BlindingDark\\\\Desktop\\\\1.txt\\"))" "(create (file \\"1.txt\\"))" "(create (file \\"c\:/1.txt\\"))" "(create (file \\"C\:/Users/BlindingDark/Desktop/1.txt\\"))" "(delete (file \\"c\:/1.txt\\"))" "(delete (file \\"1.txt\\"))" "(def test-file (file \\"C\:/Users/BlindingDark/Desktop/1.txt\\"))" "(file? temp-file)" "(file? test-file)" "(ns gpg.core\\r\\n   (\:require [me.raynes.fs \:as fs])\\r\\n   (\:use [clojure.java.io]))" "(ns gpg.core\\r\\n   (\:use [clojure.java.io]))" "alias clojure.java.io as io" "(alias clojure.java.io as io)" "(require '[clojure.java.io \:as io])" "(def test-file (file \\"C\:/Users/BlindingDark/Desktop/1.txt\\"))" "(ns gpg.core\\r\\n   (\:require [me.raynes.fs \:as fs])\\r\\n   (\:use [clojure.java.io \:only [reader]])" "(ns gpg.core\\r\\n   (\:require [me.raynes.fs \:as fs])\\r\\n   (\:use [clojure.java.io \:only [reader]]))" "(ns gpg.core\\r\\n   (\:use [clojure.java.io \:only [reader]]))" "(ns\\r\\n   (\:use [clojure.java.io \:only [reader]]))" "\\r\\n   (\:use [clojure.java.io \:only [reader]])" "(ns gpg.core\\r\\n   (\:require [me.raynes.fs \:as fs])\\r\\n   (\:use [clojure.java.io \:only [reader]]))" "(def test-file (file \\"C\:/Users/BlindingDark/Desktop/1.txt\\"))" "(ns gpg.core\\r\\n   (\:require [me.raynes.fs \:as fs])\\r\\n   (\:use [clojure.java.io \:only [reader writer]]))" "(ns gpg.core\\r\\n   (\:use [clojure.java.io]\\r\\n         [me.raynes.fs \:only [file]]))" "(ns gpg.core\\r\\n   (\:use [clojure.java.io]\\r\\n         [me.raynes.fs \:only [copy+]]))" "(ns gpg.core\\r\\n   (\:use [clojure.java.io]\\r\\n         [me.raynes.fs \:only [copy+]] \:as fs))" "(ns gpg.core\\r\\n   (\:use [clojure.java.io]\\r\\n         [me.raynes.fs \:only [copy+] \:as fs]))" "(.write test-file-2 \\"test\\")" "(ns gpg.core\\r\\n   (\:import [java.security.MessageDigest])\\r\\n   (\:use [clojure.java.io]\\r\\n         [me.raynes.fs \:only [copy+] \:as fs]))" "(MessageDigest/getInstance \\"MD5\\")" "(ns gpg.core\\r\\n   (\:import [java.security MessageDigest])\\r\\n   (\:use [clojure.java.io]\\r\\n         [me.raynes.fs \:only [copy+] \:as fs]))" "(MessageDigest/getInstance \\"MD5\\")" "(update. (MessageDigest/getInstance \\"MD5\\") \\"test\\")" "(update. (MessageDigest. getInstance \\"MD5\\") \\"test\\")" "(.update (MessageDigest. getInstance \\"MD5\\") \\"test\\")" "(.update (MessageDigest/getInstance \\"MD5\\") \\"test\\")" "(.update (MessageDigest/getInstance \\"MD5\\") (.getBytes \\"TEST\\" \\"utf-8\\"))" "(def md5 (MessageDigest/getInstance \\"MD5\\"))" "(.update md5 (.getBytes \\"TEST\\" \\"utf-8\\"))" "(.digest md5)" "(.update md5 (.getBytes \\"TEST\\" \\"utf-8\\"))" "(.update md5 (.getBytes \\"111\\" \\"utf-8\\"))" "(.digest md5)" "(.update md5 (.getBytes \\"TEST\\" \\"utf-8\\"))" "(.digest md5)" "(slurp test-file-1)" "(class (slurp test-file-1))" "(class (.digest md5))" "(String. (.digest md5))" "(toHexString (.digest md5))" "(Integer/toHexString (.digest md5))" "(slurp file-1)" "(ns gpg.core\\r\\n   (\:import [java.security MessageDigest])\\r\\n   (\:use [clojure.java.io]\\r\\n         [me.raynes.fs.compression \:as fsc]))" "(zip file-1)" "(zip file-1 file-2)" "(zip \\"1.zip\\" [\\"C\:/Users/BlindingDark/Desktop/1.txt\\" \\"C\:/Users/BlindingDark/Desktop/2.txt\\"])" "(zip \\"1.zip\\" [file-1 file-2])" "(zip \\"1.zip\\" [[\\"1.txt\\" file-1] [\\"2.txt\\" file-2]])" "(zip \\"1.zip\\" [[\\"1.txt\\" (slurp file-1)] [\\"2.txt\\" (slurp file-2)]])" "(zip \\"C\:/Users/BlindingDark/Desktop/1.zip\\" [[\\"1.txt\\" (slurp file-1)] [\\"2.txt\\" (slurp file-2)]])" "(\= \\"123\\" \\"1\\")" "(\= \\"123\\" \\"123\\")" "(\= (slurp file-2) (slurp \\"C\:/Users/BlindingDark/Desktop/22.txt\\"))" "(\= (slurp \\"C\:/Users/BlindingDark/Desktop/2.txt\\") (slurp \\"C\:/Users/BlindingDark/Desktop/22.txt\\"))" "(\= (slurp \\"C\:/Users/BlindingDark/Desktop/1.txt\\") (slurp \\"C\:/Users/BlindingDark/Desktop/22.txt\\"))" "(def file-hash-mail-zip (file \\"C\:/Users/BlindingDark/Desktop/hash-mail.zip\\"))" "(zip (resource file-hash-mail-zip) [[\\"1.txt\\" (slurp file-1)] [\\"2.txt\\" (slurp file-2)]])" "(zip (.getPath file-hash-mail-zip) [[\\"1.txt\\" (slurp file-1)] [\\"2.txt\\" (slurp file-2)]])" "(.encodeBuffer (BASE64Encoder.) file-hash)" "(.encodeBuffer (BASE64Encoder.) (md5-result file-hash))" "(.encodeBuffer (BASE64Encoder.) (md5-result file-mail))" "(defn creat-hash-file\\r\\n  \\"\u7B2C\u4E00\u4E2A\u53C2\u6570\u662F\u5F85\u53D6\u5F97\u6458\u8981\u7684file,\u7B2C\u4E8C\u4E2A\u53C2\u6570\u662F\u8F93\u51FA\u7684hash-file\\"\\r\\n  \\"111\\"\\r\\n  [f-mail f-hash]\\r\\n  (copy (BASE64-encoder (md5-result f-mail)) f-hash))" "(defn BASE64-decoder\\r\\n  \\"\u53C2\u6570\u662F\u8981\u89E3\u7801\u7684file-string,\u8FD4\u56DE\u89E3\u7801\u540E\u7684byte\\"\\r\\n  [file-string]\\r\\n  (.decodeBuffer (BASE64Encoder.) file-string))" "(BASE64-decoder (.encodeBuffer (BASE64Encoder.) (md5-result file-mail)))" "(ns gpg.core\\r\\n   (\:import [java.security MessageDigest]\\r\\n            [sun.misc BASE64Encoder]\\r\\n            [sun.misc BASE64Decoder])" "(ns gpg.core\\r\\n   (\:import [java.security MessageDigest]\\r\\n            [sun.misc BASE64Encoder]\\r\\n            [sun.misc BASE64Decoder]))" "(BASE64-decoder (.encodeBuffer (BASE64Encoder.) (md5-result file-mail)))" "(BASE64Encoder (md5-result file-mail))" "(BASE64-encoder (md5-result file-mail))" "(BASE64-decoder (BASE64-encoder (md5-result file-mail)))" "(defn BASE64-decoder\\r\\n  \\"\u53C2\u6570\u662F\u8981\u89E3\u7801\u7684file-string,\u8FD4\u56DE\u89E3\u7801\u540E\u7684byte\\"\\r\\n  [file-string]\\r\\n  (.decodeBuffer (BASE64Decoder.) file-string))" "(BASE64-decoder (BASE64-encoder (md5-result file-mail)))" "(BASE64-encoder (BASE64-decoder (BASE64-encoder (md5-result file-mail))))" "(ns gpg.core\\r\\n   (\:import [java.security MessageDigest]\\r\\n            [java.security KeyPairGenerator]\\r\\n            [sun.misc BASE64Encoder]\\r\\n            [sun.misc BASE64Decoder])\\r\\n   (\:use [clojure.java.io]\\r\\n         [me.raynes.fs.compression \:as fsc]))" "(.getInstance (KeyPairGenerator.) \\"RSA\\")" "(KeyPairGenerator.)" "(ns gpg.core\\r\\n   (\:import [java.security MessageDigest]\\r\\n            [java.security KeyPairGenerator]\\r\\n            [sun.misc BASE64Encoder]\\r\\n            [sun.misc BASE64Decoder])\\r\\n   (\:use [clojure.java.io]\\r\\n         [me.raynes.fs.compression \:as fsc]))" "(KeyPairGenerator.)" "(KeyPairGenerator/getInstance \\"RSA\\")" "(.initialize (KeyPairGenerator/getInstance \\"RSA\\") 1024)" "(defn generate-RSA-key-pair\\r\\n  \\"\u751F\u6210\u516C\u94A5\u548C\u79C1\u94A5\u5BF9\uFF0C\u57FA\u4E8ERSA\u7B97\u6CD5,\u65E0\u53C2\u6570,\u8FD4\u56DE\u516C\u94A5-\u79C1\u94A5\u5BF9vector\\"\\r\\n  []\\r\\n  (let [key-pair-gen  (KeyPairGenerator/getInstance \\"RSA\\")]\\r\\n    (.initialize key-pair-gen 1024)\\r\\n    (let [key-pair (.generateKeyPair key-pair-gen)]\\r\\n      (map \#(%1 %2) (.getPublic .getPrivate) (key-pair key-pair)))))" "(defn generate-RSA-key-pair\\r\\n  \\"\u751F\u6210\u516C\u94A5\u548C\u79C1\u94A5\u5BF9\uFF0C\u57FA\u4E8ERSA\u7B97\u6CD5,\u65E0\u53C2\u6570,\u8FD4\u56DE\u516C\u94A5-\u79C1\u94A5\u5BF9vector\\"\\r\\n  []\\r\\n  (let [key-pair-gen  (KeyPairGenerator/getInstance \\"RSA\\")]\\r\\n    (.initialize key-pair-gen 1024)\\r\\n    (let [key-pair (.generateKeyPair key-pair-gen)]\\r\\n      (.getPublic key-pair)\\r\\n      \#_(map \#(%1 %2) (.getPublic .getPrivate) (key-pair key-pair)))))" "(class (defn generate-RSA-key-pair\\r\\n  \\"\u751F\u6210\u516C\u94A5\u548C\u79C1\u94A5\u5BF9\uFF0C\u57FA\u4E8ERSA\u7B97\u6CD5,\u65E0\u53C2\u6570,\u8FD4\u56DE\u516C\u94A5-\u79C1\u94A5\u5BF9vector\\"\\r\\n  []\\r\\n  (let [key-pair-gen  (KeyPairGenerator/getInstance \\"RSA\\")]\\r\\n    (.initialize key-pair-gen 1024)\\r\\n    (let [key-pair (.generateKeyPair key-pair-gen)]\\r\\n      (.getPublic key-pair)\\r\\n      \#_(map \#(%1 %2) (.getPublic .getPrivate) (key-pair key-pair))))))" "(class (defn generate-RSA-key-pair\\r\\n  \\"\u751F\u6210\u516C\u94A5\u548C\u79C1\u94A5\u5BF9\uFF0C\u57FA\u4E8ERSA\u7B97\u6CD5,\u65E0\u53C2\u6570,\u8FD4\u56DE\u516C\u94A5-\u79C1\u94A5\u5BF9vector\\"\\r\\n  []\\r\\n  (let [key-pair-gen  (KeyPairGenerator/getInstance \\"RSA\\")]\\r\\n    (.initialize key-pair-gen 1024)\\r\\n    (let [key-pair (.generateKeyPair key-pair-gen)]\\r\\n      (BASE64-encoder (.getEncoded (.getPrivate key-pair)))\\r\\n      \#_(map \#(%1 %2) (.getPublic .getPrivate) (key-pair key-pair))))))" "(defn generate-RSA-key-pair\\r\\n  \\"\u751F\u6210\u516C\u94A5\u548C\u79C1\u94A5\u5BF9\uFF0C\u57FA\u4E8ERSA\u7B97\u6CD5,\u65E0\u53C2\u6570,\u8FD4\u56DE\u516C\u94A5-\u79C1\u94A5\u5BF9vector\\"\\r\\n  []\\r\\n  (let [key-pair-gen  (KeyPairGenerator/getInstance \\"RSA\\")]\\r\\n    (.initialize key-pair-gen 1024)\\r\\n    (let [key-pair (.generateKeyPair key-pair-gen)]\\r\\n      (BASE64-encoder (.getEncoded (.getPrivate key-pair)))\\r\\n      \#_(map \#(%1 %2) (.getPublic .getPrivate) (key-pair key-pair)))))" "(print (defn generate-RSA-key-pair\\r\\n  \\"\u751F\u6210\u516C\u94A5\u548C\u79C1\u94A5\u5BF9\uFF0C\u57FA\u4E8ERSA\u7B97\u6CD5,\u65E0\u53C2\u6570,\u8FD4\u56DE\u516C\u94A5-\u79C1\u94A5\u5BF9vector\\"\\r\\n  []\\r\\n  (let [key-pair-gen  (KeyPairGenerator/getInstance \\"RSA\\")]\\r\\n    (.initialize key-pair-gen 1024)\\r\\n    (let [key-pair (.generateKeyPair key-pair-gen)]\\r\\n      (BASE64-encoder (.getEncoded (.getPrivate key-pair)))\\r\\n      \#_(map \#(%1 %2) (.getPublic .getPrivate) (key-pair key-pair))))))" "(generate-RSA-key-pair)" "(defn generate-RSA-key-pair\\r\\n  \\"\u751F\u6210\u516C\u94A5\u548C\u79C1\u94A5\u5BF9\uFF0C\u57FA\u4E8ERSA\u7B97\u6CD5,\u65E0\u53C2\u6570,\u8FD4\u56DE\u516C\u94A5-\u79C1\u94A5\u5BF9vector\\"\\r\\n  []\\r\\n  (let [key-pair-gen  (KeyPairGenerator/getInstance \\"RSA\\")]\\r\\n    (.initialize key-pair-gen 1024)\\r\\n    (let [key-pair (.generateKeyPair key-pair-gen)]\\r\\n      (BASE64-encoder (.getEncoded (.getPrivate key-pair)))\\r\\n      \#_(map \#(%1 %2) (.getPublic .getPrivate) (key-pair key-pair)))))" "(defn generate-RSA-key-pair\\r\\n  \\"\u751F\u6210\u516C\u94A5\u548C\u79C1\u94A5\u5BF9\uFF0C\u57FA\u4E8ERSA\u7B97\u6CD5,\u65E0\u53C2\u6570,\u8FD4\u56DE\u516C\u94A5-\u79C1\u94A5\u5BF9vector\\"\\r\\n  []\\r\\n  (let [key-pair-gen  (KeyPairGenerator/getInstance \\"RSA\\")]\\r\\n    (.initialize key-pair-gen 1024)\\r\\n    (let [key-pair (.generateKeyPair key-pair-gen)]\\r\\n      \#_(BASE64-encoder (.getEncoded (.getPrivate key-pair)))\\r\\n      (map \#(%1 %2) (key-pair key-pair) (.getPublic .getPrivate)))))" "(defn generate-RSA-key-pair\\r\\n  \\"\u751F\u6210\u516C\u94A5\u548C\u79C1\u94A5\u5BF9\uFF0C\u57FA\u4E8ERSA\u7B97\u6CD5,\u65E0\u53C2\u6570,\u8FD4\u56DE\u516C\u94A5-\u79C1\u94A5\u5BF9vector\\"\\r\\n  []\\r\\n  (let [key-pair-gen  (KeyPairGenerator/getInstance \\"RSA\\")]\\r\\n    (.initialize key-pair-gen 1024)\\r\\n    (let [key-pair (.generateKeyPair key-pair-gen)]\\r\\n      (.getPublic key-pair)\\r\\n      (map \#(BASE64-encoder (.getEncoded %)) ((.getPublic key-pair) (.getPrivate key-pair))))))" "(generate-RSA-key-pair)" "(list? generate-RSA-key-pair)" "(first generate-RSA-key-pair)" "(first (generate-RSA-key-pair))" "(+ \\"1\\" \\"2\\")" "(str \\"1\\" \\"2\\")" "(load-key-pair \\"C\:/Users/BlindingDark/Desktop\\")" "(list? (load-key-pair \\"C\:/Users/BlindingDark/Desktop\\"))" "(defn get-private-key-ob\\r\\n  \\"\u5F97\u5230private-key\u7684\u5BF9\u8C61,\u53C2\u6570\u662F\u516C\u94A5-\u79C1\u94A5\u5BF9\\"\\r\\n  [key-pair]\\r\\n  (let [keyFactory  (KeyFactory/getInstance \\"RSA\\")]\\r\\n    (.generatePrivate keyFactory (PKCS8EncodedKeySpec. (BASE64-decoder (second key-pair))))))" "(ns gpg.core\\r\\n   (\:import [java.security MessageDigest]\\r\\n            [java.security KeyPairGenerator]\\r\\n            [java.security KeyFactory]\\r\\n            [java.security.spec PKCS8EncodedKeySpec]\\r\\n            [sun.misc BASE64Encoder]\\r\\n            [sun.misc BASE64Decoder])\\r\\n   (\:use [clojure.java.io]\\r\\n         [me.raynes.fs.compression \:as fsc]))" "(defn get-private-key-ob\\r\\n  \\"\u5F97\u5230private-key\u7684\u5BF9\u8C61,\u53C2\u6570\u662F\u516C\u94A5-\u79C1\u94A5\u5BF9\\"\\r\\n  [key-pair]\\r\\n  (let [keyFactory  (KeyFactory/getInstance \\"RSA\\")]\\r\\n    (.generatePrivate keyFactory (PKCS8EncodedKeySpec. (BASE64-decoder (second key-pair))))))" "(get-private-key-ob (load-key-pair \\"C\:/Users/BlindingDark/Desktop\\"))" "(class (get-private-key-ob (load-key-pair \\"C\:/Users/BlindingDark/Desktop\\")))" "(ns gpg.core\\r\\n   (\:import [java.security MessageDigest]\\r\\n            [java.security KeyPairGenerator]\\r\\n            [java.security KeyFactory]\\r\\n            [java.security.spec PKCS8EncodedKeySpec]\\r\\n            [javax.crypto Cipher]\\r\\n            [sun.misc BASE64Encoder]\\r\\n            [sun.misc BASE64Decoder])\\r\\n   (\:use [clojure.java.io]\\r\\n         [me.raynes.fs.compression \:as fsc]))" "(slurp \\"C\:/Users/BlindingDark/Desktop/test.txt\\")" "(.getBytes (slurp \\"C\:/Users/BlindingDark/Desktop/test.txt\\"))" "(generate-RSA-key-pair)" "'(\\"1\\" \\"234\\")" "(\\"1\\" \\"234\\")" "(list \\"1\\" \\"234\\")" "[\\"1\\" \\"2345\\"]" "(second '(\\"1234\\" \\"w3456\\" \\"3\\" \\"4\\"))" "(nth '(\\"1234\\" \\"w3456\\" \\"3\\" \\"4\\") 3)" "(nth '(\\"1234\\" \\"w3456\\" \\"3\\" \\"4\\") 0)" "(def my-list '(\\"1\\" \\"2\\" \\"3\\"))" "(second my-list)" "(nth my-list 1)" "(get-private-key-ob (generate-RSA-key-pair))" "(encrypt (get-private-key-ob (generate-RSA-key-pair)) (.getBytes (slurp \\"C\:/Users/BlindingDark/Desktop/test.txt\\")))" "(BASE64-encoder (encrypt (get-private-key-ob (generate-RSA-key-pair)) (.getBytes (slurp \\"C\:/Users/BlindingDark/Desktop/test.txt\\"))))" "(BASE64-encoder (encrypt (get-private-key-ob (load-key-pair \\"C\:/Users/BlindingDark/Desktop\\")) (.getBytes (slurp \\"C\:/Users/BlindingDark/Desktop/test.txt\\"))))" "(def encrypt-by-private-key;\u8FD9\u91CC\u662F\u51FD\u6570\u540D\\r\\n  \\"\u8BFB\u53D6\u6587\u4EF6private.txt\u6765\u52A0\u5BC6\u6307\u5B9A\u7684String,\u52A0\u5BC6\u540E\u7684\u6587\u4EF6\u4FDD\u5B58\u5230private\u6587\u4EF6\u540C\u7EA7\u3002\\r\\n      \u7B2C\u4E00\u4E2A\u53C2\u6570\u662Fprivate.txt\u7684\u8DEF\u5F84\\r\\n      \u7B2C\u4E8C\u4E2A\u53C2\u6570\u662F\u8981\u52A0\u5BC6\u7684String\\";\u8FD9\u91CC\u5199API\u6587\u6863\\r\\n  [file-path some-string];\u5206\u53F7\u662F\u6CE8\u91CA\u7684\u7B26\u53F7\u3002\\r\\n  (spit \\r\\n    file-path \\r\\n    (BASE64-encoder \\r\\n      (encrypt \\r\\n        (get-private-key-ob (load-key-pair file-path)) \\r\\n        (.getBytes some-string)))));\u51FD\u6570\u4E3B\u4F53" "(def encrypt-by-private-key;\u8FD9\u91CC\u662F\u51FD\u6570\u540D\\r\\n  [file-path some-string];\u5206\u53F7\u662F\u6CE8\u91CA\u7684\u7B26\u53F7\u3002\\r\\n  (spit \\r\\n    file-path \\r\\n    (BASE64-encoder \\r\\n      (encrypt \\r\\n        (get-private-key-ob (load-key-pair file-path)) \\r\\n        (.getBytes some-string)))));\u51FD\u6570\u4E3B\u4F53" "(def encrypt-by-private-key;\u8FD9\u91CC\u662F\u51FD\u6570\u540D\\r\\n  \\"\u8BFB\u53D6\u6587\u4EF6private.txt\u6765\u52A0\u5BC6\u6307\u5B9A\u7684String,\u52A0\u5BC6\u540E\u7684\u6587\u4EF6\u4FDD\u5B58\u5230private\u6587\u4EF6\u540C\u7EA7\u3002\\r\\n      \u7B2C\u4E00\u4E2A\u53C2\u6570\u662Fprivate.txt\u7684\u8DEF\u5F84\\r\\n      \u7B2C\u4E8C\u4E2A\u53C2\u6570\u662F\u8981\u52A0\u5BC6\u7684String\\";\u8FD9\u91CC\u5199API\u6587\u6863\\r\\n  [file-path some-string];\u5206\u53F7\u662F\u6CE8\u91CA\u7684\u7B26\u53F7\u3002\\r\\n  );\u51FD\u6570\u4E3B\u4F53" "(def encrypt-by-private-key;\u8FD9\u91CC\u662F\u51FD\u6570\u540D\\r\\n  [file-path some-string];\u5206\u53F7\u662F\u6CE8\u91CA\u7684\u7B26\u53F7\u3002\\r\\n  ());\u51FD\u6570\u4E3B\u4F53" "(defn encrypt-by-private-key;\u8FD9\u91CC\u662F\u51FD\u6570\u540D\\r\\n  \\"\u8BFB\u53D6\u6587\u4EF6private.txt\u6765\u52A0\u5BC6\u6307\u5B9A\u7684String,\u52A0\u5BC6\u540E\u7684\u6587\u4EF6\u4FDD\u5B58\u5230private\u6587\u4EF6\u540C\u7EA7\u3002\\r\\n      \u7B2C\u4E00\u4E2A\u53C2\u6570\u662Fprivate.txt\u7684\u8DEF\u5F84\\r\\n      \u7B2C\u4E8C\u4E2A\u53C2\u6570\u662F\u8981\u52A0\u5BC6\u7684String\\";\u8FD9\u91CC\u5199API\u6587\u6863\\r\\n  [file-path some-string];\u5206\u53F7\u662F\u6CE8\u91CA\u7684\u7B26\u53F7\u3002\\r\\n  (spit \\r\\n    file-path \\r\\n    (BASE64-encoder \\r\\n      (encrypt \\r\\n        (get-private-key-ob (load-key-pair file-path)) \\r\\n        (.getBytes some-string)))));\u51FD\u6570\u4E3B\u4F53" "(defn encrypt-by-private-key;\u8FD9\u91CC\u662F\u51FD\u6570\u540D\\r\\n  \\"\u8BFB\u53D6\u6587\u4EF6private.txt\u6765\u52A0\u5BC6\u6307\u5B9A\u7684String,\u52A0\u5BC6\u540E\u7684\u6587\u4EF6\u4FDD\u5B58\u5230private\u6587\u4EF6\u540C\u7EA7\u3002\\r\\n      \u7B2C\u4E00\u4E2A\u53C2\u6570\u662Fprivate.txt\u7684\u8DEF\u5F84\\r\\n      \u7B2C\u4E8C\u4E2A\u53C2\u6570\u662F\u8981\u52A0\u5BC6\u7684String\\";\u8FD9\u91CC\u5199API\u6587\u6863\\r\\n  [file-path some-string];\u5206\u53F7\u662F\u6CE8\u91CA\u7684\u7B26\u53F7\u3002\\r\\n  (spit \\r\\n    (str file-path \\"/encrypted.txt\\") \\r\\n    (BASE64-encoder \\r\\n      (encrypt \\r\\n        (get-private-key-ob (load-key-pair file-path)) \\r\\n        (.getBytes some-string)))));\u51FD\u6570\u4E3B\u4F53" "(encrypt-by-private-key \\"C\:/Users/BlindingDark/Desktop\\" \\"test\\")" "(encrypt-by-private-key \\"C\:/Users/BlindingDark/Desktop\\" (slurp \\"C\:/Users/BlindingDark/Desktop/test.txt\\"))" "(defn decrypt\\r\\n   \\"\u89E3\u5BC6byte\u6570\u7EC4,\u7B2C\u4E00\u4E2A\u53C2\u6570\u662Fkey,\u7B2C\u4E8C\u4E2A\u53C2\u6570\u662F\u8981\u89E3\u5BC6\u7684byte\u6570\u7EC4\\"\\r\\n   [some-key some-byte]\\r\\n   (let [cipher (Cipher/getInstance \\"RSA\\")]\\r\\n     (.init cipher Cipher/DECRYPT_MODE some-key)\\r\\n     (.doFinal cipher some-byte)))" "(defn encrypt-by-key-ob\\r\\n  \\"\u7B2C\u4E00\u4E2A\u53C2\u6570\u662Fget-key-ob\u51FD\u6570\\r\\n     \u7B2C\u4E8C\u4E2A\u53C2\u6570\u662Fkey\u6240\u5728\u7684\u8DEF\u5F84\\r\\n     \u7B2C\u4E09\u4E2A\u53C2\u6570\u662F\u8981\u52A0\u5BC6\u7684String\\"\\r\\n  [get-key-ob file-path some-string]\\r\\n  (spit \\r\\n    (str file-path \\"/encrypted.txt\\") \\r\\n    (BASE64-encoder \\r\\n      (encrypt \\r\\n        (get-key-ob (load-key-pair file-path)) \\r\\n        (.getBytes some-string)))))" "(encrypt-by-key-ob get-private-key-ob \\"C\:/Users/BlindingDark/Desktop\\" (slurp file-hash))" "(encrypt-by-key-ob get-private-key-ob \\"C\:/Users/BlindingDark/Desktop\\" (slurp file-mail))" "(def file-mail (file \\"C\:/Users/BlindingDark/Desktop/mail.txt\\"))" "(encrypt-by-key-ob get-private-key-ob \\"C\:/Users/BlindingDark/Desktop\\" (slurp file-mail))" "(slurp file-mail)" "(encrypt-by-key-ob get-private-key-ob \\"C\:/Users/BlindingDark/Desktop\\" \\"234\\")" "(encrypt-by-key-ob get-private-key-ob \\"C\:/Users/BlindingDark/Desktop\\" \\"dfdsfdsfdsfdsfdsfdsfdsfdsfdsfdsfdsfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\")" "(encrypt-by-key-ob get-private-key-ob \\"C\:/Users/BlindingDark/Desktop\\" (slurp \\"C\:/Users/BlindingDark/Desktop/test.txt\\"))" "(defn encrypt-by-private-key;\u8FD9\u91CC\u662F\u51FD\u6570\u540D\\r\\n  \\"\u8BFB\u53D6\u6587\u4EF6private.txt\u6765\u52A0\u5BC6\u6307\u5B9A\u7684String,\u52A0\u5BC6\u540E\u7684\u6587\u4EF6\u4FDD\u5B58\u5230private\u6587\u4EF6\u540C\u7EA7\u3002\\r\\n      \u7B2C\u4E00\u4E2A\u53C2\u6570\u662Fprivate.txt\u7684\u8DEF\u5F84\\r\\n      \u7B2C\u4E8C\u4E2A\u53C2\u6570\u662F\u8981\u52A0\u5BC6\u7684String\\";\u8FD9\u91CC\u5199API\u6587\u6863\\r\\n  [file-path some-string];\u5206\u53F7\u662F\u6CE8\u91CA\u7684\u7B26\u53F7\u3002\\r\\n  (encrypt-by-key-ob get-private-key-ob file-path some-string))" "(encrypt-by-private-key \\"C\:/Users/BlindingDark/Desktop\\" (slurp file-hash))" "(encrypt-by-key-ob get-private-key-ob \\"C\:/Users/BlindingDark/Desktop\\" (slurp \\"C\:/Users/BlindingDark/Desktop/test.txt\\"))" "(defn decrypt-by-public-key\\r\\n  \\"\u7B2C\u4E00\u4E2A\u53C2\u6570\u662F\u516C\u94A5\u7684\u8DEF\u5F84,\u7B2C\u4E8C\u4E2A\u53C2\u6570\u662F\u8981\u89E3\u5BC6\u7684String\\"\\r\\n  [file-path some-string]\\r\\n  (de-or-encrypt-by-key-ob decrypt get-public-key-ob file-path some-string))" "(decrypt-by-public-key \\"C\:/Users/BlindingDark/Desktop\\" (slurp \\"C\:/Users/BlindingDark/Desktop/test.txtencrypted\\"))" "(decrypt-by-public-key \\"C\:/Users/BlindingDark/Desktop\\" (slurp \\"C\:/Users/BlindingDark/Desktop/encrypted.txt\\"))" "(encrypt-by-key-ob get-private-key-ob \\"C\:/Users/BlindingDark/Desktop\\" (slurp \\"C\:/Users/BlindingDark/Desktop/test.txt\\"))" "(decrypt-by-public-key \\"C\:/Users/BlindingDark/Desktop\\" (encrypt-by-key-ob get-private-key-ob \\"C\:/Users/BlindingDark/Desktop\\" (slurp \\"C\:/Users/BlindingDark/Desktop/test.txt\\")))" "((decrypt-by-public-key \\"C\:/Users/BlindingDark/Desktop\\" \\"1\\")" "((decrypt-by-public-key \\"C\:/Users/BlindingDark/Desktop\\" \\"--\\")" "(str (.getBytes \\"23\\"))" "(String. (.getBytes \\"23\\"))" "(encrypt-by-private-key \\"C\:/Users/BlindingDark/Desktop\\" (slurp file-hash))" "(decrypt-by-public-key \\"C\:/Users/BlindingDark/Desktop\\" (encrypt-by-key-ob get-private-key-ob \\"C\:/Users/BlindingDark/Desktop\\" (slurp \\"C\:/Users/BlindingDark/Desktop/test.txt\\")))" "((decrypt-by-public-key \\"C\:/Users/BlindingDark/Desktop\\" \\"--\\")" "(defn decrypt-by-public-key\\r\\n  \\"\u7B2C\u4E00\u4E2A\u53C2\u6570\u662F\u516C\u94A5\u7684\u8DEF\u5F84,\u7B2C\u4E8C\u4E2A\u53C2\u6570\u662F\u8981\u89E3\u5BC6\u7684String\\"\\r\\n  [file-path some-string]\\r\\n  (decrypt-by-key-ob get-public-key-ob file-path some-string))" "(decrypt-by-public-key \\"C\:/Users/BlindingDark/Desktop\\" (encrypt-by-key-ob get-private-key-ob \\"C\:/Users/BlindingDark/Desktop\\" (slurp \\"C\:/Users/BlindingDark/Desktop/test.txt\\")))" "(decrypt-by-public-key \\"C\:/Users/BlindingDark/Desktop\\" file-signed-hash)" "(decrypt-by-public-key \\"C\:/Users/BlindingDark/Desktop\\" (slurp file-signed-hash))" "(\= \\r\\n  (slurp file-hash) \\r\\n  (decrypt-by-public-key \\r\\n    \\"C\:/Users/BlindingDark/Desktop\\" \\r\\n    (slurp file-signed-hash)))" "(slurp \\"1234\\")" "(slurp (file \\"1234\\"))" "(BASE64Encoder (.getBytes (slurp file-hash-mail-zip)))" "(BASE64-encoder (.getBytes (slurp file-hash-mail-zip)))" "(spit \\"C\:/Users/BlindingDark/Desktop/1.txt\\" (BASE64-encoder (.getBytes (slurp file-hash-mail-zip))))" "(copy (BASE64-decoder (slurp \\"C\:/Users/BlindingDark/Desktop/1.txt\\")) \\"C\:/Users/BlindingDark/Desktop/1.zip\\")" "(copy (BASE64-decoder (slurp \\"C\:/Users/BlindingDark/Desktop/1.txt\\")) (file \\"C\:/Users/BlindingDark/Desktop/1.zip\\"))" "(BASE64-decoder (slurp \\"C\:/Users/BlindingDark/Desktop/1.txt\\"))" "(.getBytes (slurp file-hash-mail-zip))" "(\= (.getBytes (slurp file-hash-mail-zip)) (BASE64-decoder (slurp \\"C\:/Users/BlindingDark/Desktop/1.txt\\")))\=" "(\= (.getBytes (slurp file-hash-mail-zip)) (BASE64-decoder (slurp \\"C\:/Users/BlindingDark/Desktop/1.txt\\")))" "(\= (.getBytes (slurp file-hash-mail-zip)) \\r\\n   (BASE64-decoder \\r\\n     (BASE64-encoder (.getBytes (slurp file-hash-mail-zip)))))" "(\= (.getBytes (slurp file-hash-mail-zip)) \\r\\n  (.getBytes (slurp file-hash-mail-zip)))" "(\= (.getBytes (slurp file-hash-mail-zip)) \\r\\n   (.getBytes (slurp file-hash-mail-zip)))" "(.equals (.getBytes (slurp file-hash-mail-zip)) \\r\\n   (.getBytes (slurp file-hash-mail-zip)))" "(\= (slurp file-hash-mail-zip)\\r\\n  (slurp file-hash-mail-zip))" "(slurp file-hash-mail-zip)" "(ns gpg.core\\r\\n   (\:import [java.security MessageDigest]\\r\\n            [java.security KeyPairGenerator]\\r\\n            [java.security KeyFactory]\\r\\n            [java.security.spec PKCS8EncodedKeySpec]\\r\\n            [java.security.spec X509EncodedKeySpec]\\r\\n            [javax.crypto Cipher]\\r\\n            [sun.misc BASE64Encoder]\\r\\n            [sun.misc BASE64Decoder]\\r\\n            [org.apache.commons.io FileUtils])\\r\\n   (\:use [clojure.java.io]\\r\\n         [me.raynes.fs.compression \:as fsc]))" "(ns gpg.core\\r\\n   (\:import [java.security MessageDigest]\\r\\n            [java.security KeyPairGenerator]\\r\\n            [java.security KeyFactory]\\r\\n            [java.security.spec PKCS8EncodedKeySpec]\\r\\n            [java.security.spec X509EncodedKeySpec]\\r\\n            [javax.crypto Cipher]\\r\\n            [sun.misc BASE64Encoder]\\r\\n            [sun.misc BASE64Decoder])\\r\\n   (\:use [clojure.java.io]\\r\\n         [me.raynes.fs.compression \:as fsc]\\r\\n         [org.apache.commons.io FileUtils]))" "(FileUtils/readFileToByteArray file-hash-mail-zip)" "(\= (FileUtils/readFileToByteArray file-hash-mail-zip) \\r\\n  (FileUtils/readFileToByteArray file-hash-mail-zip))" "(.equals (FileUtils/readFileToByteArray file-hash-mail-zip) \\r\\n  (FileUtils/readFileToByteArray file-hash-mail-zip))" "(FileUtils/readFileToByteArray file-hash-mail-zip)" "(Arrays/equals (FileUtils/readFileToByteArray file-hash-mail-zip) \\r\\n  (.getBytes (slurp file-hash-mail-zip)))" "(ns gpg.core\\r\\n   (\:import [java.security MessageDigest]\\r\\n            [java.security KeyPairGenerator]\\r\\n            [java.security KeyFactory]\\r\\n            [java.security.spec PKCS8EncodedKeySpec]\\r\\n            [java.security.spec X509EncodedKeySpec]\\r\\n            [java.util Arrays]\\r\\n            [javax.crypto Cipher]\\r\\n            [sun.misc BASE64Encoder]\\r\\n            [sun.misc BASE64Decoder]\\r\\n            [org.apache.commons.io FileUtils])" "(ns gpg.core\\r\\n   (\:import [java.security MessageDigest]\\r\\n            [java.security KeyPairGenerator]\\r\\n            [java.security KeyFactory]\\r\\n            [java.security.spec PKCS8EncodedKeySpec]\\r\\n            [java.security.spec X509EncodedKeySpec]\\r\\n            [java.util Arrays]\\r\\n            [javax.crypto Cipher]\\r\\n            [sun.misc BASE64Encoder]\\r\\n            [sun.misc BASE64Decoder]\\r\\n            [org.apache.commons.io FileUtils]))" "(Arrays/equals (FileUtils/readFileToByteArray file-hash-mail-zip) \\r\\n  (.getBytes (slurp file-hash-mail-zip)))" "(Arrays/equals (FileUtils/readFileToByteArray file-hash-mail-zip) \\r\\n  (FileUtils/readFileToByteArray file-hash-mail-zip))" "(Arrays/equals (.getBytes (slurp file-hash-mail-zip)) (.getBytes (slurp file-hash-mail-zip)))" "(Arrays/equals (FileUtils/readFileToByteArray file-hash-mail-zip) \\r\\n     (.getBytes (slurp file-hash-mail-zip)))" "(.getBytes (slurp file-hash-mail-zip))" "(\= (FileUtils/readFileToByteArray file-hash-mail-zip) \\r\\n   (BASE64-decoder \\r\\n     (BASE64-encoder (FileUtils/readFileToByteArray file-hash-mail-zip))))" "(Arrays/equals (FileUtils/readFileToByteArray file-hash-mail-zip) \\r\\n   (BASE64-decoder \\r\\n     (BASE64-encoder (FileUtils/readFileToByteArray file-hash-mail-zip))))" "(spit \\"C\:/Users/BlindingDark/Desktop/1.txt\\" (BASE64-encoder (FileUtils/readFileToByteArray file-hash-mail-zip))" "(copy \\"C\:/Users/BlindingDark/Desktop/1.txt\\" (BASE64-encoder (FileUtils/readFileToByteArray file-hash-mail-zip))" "(spit \\"C\:/Users/BlindingDark/Desktop/1.txt\\" (BASE64-encoder (FileUtils/readFileToByteArray file-hash-mail-zip)))" "(str (rand))" "(defn generate-DES-key\\r\\n  []\\r\\n  (let [key-gen  (KeyGenerator/getInstance \\"RSA\\")]\\r\\n    (.init key-gen (SecureRandom. (.getBytes \\"test\\")))\\r\\n    (.generateKey key-gen)))" "(defn generate-DES-key\\r\\n  []\\r\\n  (let [key-gen  (KeyGenerator/getInstance \\"RSA\\") string-key (str (rand))]\\r\\n    (.init key-gen (SecureRandom. (.getBytes string-key)))\\r\\n    [string-key (.generateKey key-gen)]))" "(generate-DES-key)" "(defn generate-DES-key\\r\\n  []\\r\\n  (let [key-gen  (KeyGenerator/getInstance \\"DESede\\") string-key (str (rand))]\\r\\n    (.init key-gen (SecureRandom. (.getBytes string-key)))\\r\\n    [string-key (.generateKey key-gen)]))" "(generate-DES-key)" "(rand 10)" "(rand)" "(rand 99)" "(rand 99999999)" "(rand 99999999999999999999999999999999)" "(decrypt-by-public-key (slurp file-public) (slurp file-signed-hash))" "(generate-DES-key)" "(generate-DES-key \\"1\\")" "(generate-random-DES-key)" "(first (generate-random-DES-key))" "(spit file-hash-mail-BASE64ed (DES-decrypt-string (generate-DES-key \\"0.8893527056157089\\") file-hash-mail-encrypted))" "(spit file-hash-mail-BASE64ed (DES-decrypt-string (generate-DES-key \\"0.8893527056157089\\") (slurp file-hash-mail-encrypted)))\\r\\n\\r\\n;\u89E3\u7801zip\u7684base64\\r\\n(copy (BASE64-decoder (slurp file-hash-mail-BASE64ed)) (file \\"C\:/Users/BlindingDark/Desktop/1.zip\\"))" "(copy (BASE64-decoder (slurp file-send)) (file \\"C\:/Users/BlindingDark/Desktop/1.zip\\"))" "(.getParent file-mail-zip)" "(.close file-hash-mail-zip-rec)" "(1)" "'(1)" "(.close file-hash-mail-zip-rec)"]
eclipse.preferences.version=1
